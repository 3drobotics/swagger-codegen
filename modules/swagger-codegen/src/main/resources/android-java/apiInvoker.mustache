package {{invokerPackage}};

import com.google.gson.JsonParseException;
import com.squareup.okhttp.Headers;
import com.squareup.okhttp.HttpUrl;
import com.squareup.okhttp.MediaType;
import com.squareup.okhttp.MultipartBuilder;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.Request;
import com.squareup.okhttp.RequestBody;
import com.squareup.okhttp.Response;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.io.IOException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import java.util.TimeZone;
import android.util.Log;

public class ApiInvoker {
  private static final String LOG_TAG = ApiInvoker.class.getSimpleName();
  private static ApiInvoker INSTANCE = new ApiInvoker();
  private Map<String, String> defaultHeaderMap = new HashMap<String, String>();

  private OkHttpClient client = new OkHttpClient();

  public static final MediaType JSON = MediaType.parse("application/json; charset=utf-8");

  /**
   * ISO 8601 date time format.
   * @see https://en.wikipedia.org/wiki/ISO_8601
   */
  public static final SimpleDateFormat DATE_TIME_FORMAT = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");

  /**
   * ISO 8601 date format.
   * @see https://en.wikipedia.org/wiki/ISO_8601
   */
  public static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd");

  static {
    // Use UTC as the default time zone.
    DATE_TIME_FORMAT.setTimeZone(TimeZone.getTimeZone("UTC"));
    DATE_FORMAT.setTimeZone(TimeZone.getTimeZone("UTC"));

    // Set default User-Agent.
    setUserAgent("Android-Java-Swagger");
  }

  public static void setUserAgent(String userAgent) {
    INSTANCE.addDefaultHeader("User-Agent", userAgent);
  }

  public static Date parseDateTime(String str) {
    try {
      return DATE_TIME_FORMAT.parse(str);
    } catch (java.text.ParseException e) {
      throw new RuntimeException(e);
    }
  }

  public static Date parseDate(String str) {
    try {
      return DATE_FORMAT.parse(str);
    } catch (java.text.ParseException e) {
      throw new RuntimeException(e);
    }
  }

  public static String formatDateTime(Date datetime) {
    return DATE_TIME_FORMAT.format(datetime);
  }

  public static String formatDate(Date date) {
    return DATE_FORMAT.format(date);
  }

  public static String parameterToString(Object param) {
    if (param == null) {
      return "";
    } else if (param instanceof Date) {
      return formatDateTime((Date) param);
    } else if (param instanceof Collection) {
      StringBuilder b = new StringBuilder();
      for(Object o : (Collection)param) {
        if(b.length() > 0) {
          b.append(",");
        }
        b.append(String.valueOf(o));
      }
      return b.toString();
    } else {
      return String.valueOf(param);
    }
  }

  /*
    Format to {@code Pair} objects.
  */
  public static List<Pair> parameterToPairs(String collectionFormat, String name, Object value){
    List<Pair> params = new ArrayList<Pair>();

    // preconditions
    if (name == null || name.isEmpty() || value == null) return params;

    Collection valueCollection = null;
    if (value instanceof Collection) {
      valueCollection = (Collection) value;
    } else {
      params.add(new Pair(name, parameterToString(value)));
      return params;
    }

    if (valueCollection.isEmpty()){
      return params;
    }

    // get the collection format
    collectionFormat = (collectionFormat == null || collectionFormat.isEmpty() ? "csv" : collectionFormat); // default: csv

    // create the params based on the collection format
    if (collectionFormat.equals("multi")) {
      for (Object item : valueCollection) {
        params.add(new Pair(name, parameterToString(item)));
      }

      return params;
    }

    String delimiter = ",";

    if (collectionFormat.equals("csv")) {
      delimiter = ",";
    } else if (collectionFormat.equals("ssv")) {
      delimiter = " ";
    } else if (collectionFormat.equals("tsv")) {
      delimiter = "\t";
    } else if (collectionFormat.equals("pipes")) {
      delimiter = "|";
    }

    StringBuilder sb = new StringBuilder() ;
    for (Object item : valueCollection) {
      sb.append(delimiter);
      sb.append(parameterToString(item));
    }

    params.add(new Pair(name, sb.substring(1)));

    return params;
  }

  public static ApiInvoker getInstance() {
    return INSTANCE;
  }

  public void addDefaultHeader(String key, String value) {
    defaultHeaderMap.put(key, value);
  }

  public String escapeString(String str) {
    return str;
  }

  public static Object deserialize(String json, String containerType, Class cls) throws ApiException {
    try{
      if("list".equalsIgnoreCase(containerType) || "array".equalsIgnoreCase(containerType)) {
        return JsonUtil.deserializeToList(json, cls);
      }
      else if(String.class.equals(cls)) {
        if(json != null && json.startsWith("\"") && json.endsWith("\"") && json.length() > 1)
          return json.substring(1, json.length() - 1);
        else
          return json;
      }
      else {
        return JsonUtil.deserializeToObject(json, cls);
      }
    }
    catch (JsonParseException e) {
      throw new ApiException(500, e.getMessage());
    }
  }

  public static String serialize(Object obj) throws ApiException {
    try {
      if (obj != null)
        return JsonUtil.serialize(obj);
      else
        return null;
    }
    catch (Exception e) {
      throw new ApiException(500, e.getMessage());
    }
  }

  public String invokeAPI(String host, String path, String method, List<Pair> queryParams, Object body, Map<String, String> headerParams) throws ApiException {
      HttpUrl httpUrl = createUrl(host, path, queryParams);

      //headerParams.put("Accept", "application/json");
      headerParams.put("Content-Type", "application/json");
      headerParams.putAll(defaultHeaderMap);
      Headers.Builder headersBuilder = new Headers.Builder();
      for (Entry<String, String> header : headerParams.entrySet()) {
          headersBuilder.add(header.getKey(), header.getValue());
      }

      Response response = null;

      Log.d(LOG_TAG, "Request url " + httpUrl);
      try {
          if ("GET".equals(method)) {
              response = getRequest(httpUrl, headersBuilder.build());
          } else if ("POST".equals(method)) {
              response = postRequest(httpUrl, headersBuilder.build(), body);
          } else if ("PUT".equals(method)) {
              response = putRequest(httpUrl, headersBuilder.build(), body);
          } else if ("DELETE".equals(method)) {
              response = deleteRequest(httpUrl, headersBuilder.build());
          } else if ("PATCH".equals(method)) {
              response = patchRequest(httpUrl, headersBuilder.build(), body);
          }

          String responseBody = response.body().string();

          int code = response.code();
          Log.d(LOG_TAG, "Response code " + code + " body " + responseBody);
          String responseString = null;
          if (code == 204) {
              responseString = "";
              return responseString;
          } else if (code >= 200 && code < 300) {
              return responseBody;
          } else {
              if (response.message() != null) {
                  responseString = response.message();
              } else {
                  responseString = "no data";
              }
          }
          throw new ApiException(code, responseString);
      } catch (IOException e) {
          Log.e(LOG_TAG, "Failed to invoke api: " + path + " " + e);
          throw new ApiException(500, e.getMessage());
      }
  }

  public String postMedia(String host, String path, List<Pair> queryParams, RequestBody requestBody, Map<String, String> headerParams) throws ApiException {
      HttpUrl httpUrl = createUrl(host, path, queryParams);

      //headerParams.put("Content-Type", "application/json");
      headerParams.putAll(defaultHeaderMap);
      Headers.Builder headersBuilder = new Headers.Builder();
      for (Entry<String, String> header : headerParams.entrySet()) {
          headersBuilder.add(header.getKey(), header.getValue());
      }

      try {

          Request request = new Request.Builder()
              .url(httpUrl)
              .headers(headersBuilder.build())
              .post(requestBody)
              .build();

          Response response = client.newCall(request).execute();

          String responseBody = response.body().string();

          int code = response.code();
          String responseString;
          if (code == 204) {
              responseString = "";
              return responseString;
          } else if (code >= 200 && code < 300) {
              return responseBody;
          } else {
              if (response.message() != null) {
                  responseString = response.message();
              } else {
                  responseString = "no data";
              }
          }
          throw new ApiException(code, responseString);
      } catch (IOException e) {
          throw new ApiException(500, e.getMessage());
      }
  }

  public Response getRequest(HttpUrl url, Headers headers) throws IOException {

      Request request = new Request.Builder()
          .url(url)
          .headers(headers)
          .build();

      Response response = client.newCall(request).execute();
      return response;
  }

  public Response postRequest(HttpUrl url, Headers headers, Object body) throws IOException, ApiException {

      String serializedBody = serialize(body);
      Log.d(LOG_TAG, "post body: " + serializedBody);
      RequestBody requestBody = RequestBody.create(JSON, serializedBody);
      Request request = new Request.Builder()
          .url(url)
          .headers(headers)
          .post(requestBody)
          .build();


      Response response = client.newCall(request).execute();
      return response;
  }

  public Response putRequest(HttpUrl url, Headers headers, Object body) throws IOException, ApiException {
      RequestBody requestBody = RequestBody.create(JSON, serialize(body));
      Request request = new Request.Builder()
          .url(url)
          .headers(headers)
          .put(requestBody)
          .build();
      Response response = client.newCall(request).execute();
      return response;
  }

  public Response deleteRequest(HttpUrl url, Headers headers) throws IOException {
      Request request = new Request.Builder()
          .url(url)
          .delete()
          .headers(headers)
          .build();

      Response response = client.newCall(request).execute();
      return response;
  }

  public Response patchRequest(HttpUrl url, Headers headers, Object body) throws IOException, ApiException {
      RequestBody requestBody = RequestBody.create(JSON, serialize(body));
      Request request = new Request.Builder()
          .url(url)
          .patch(requestBody)
          .headers(headers)
          .build();

      Response response = client.newCall(request).execute();
      return response;
  }

  public String authRecap(HttpUrl url, Headers headers, String token, JSONObject requestBodyJson) throws IOException, ApiException {
      RequestBody requestBody = RequestBody.create(JSON, requestBodyJson.toString());
      Request request = new Request.Builder()
          .url(url)
          .headers(headers)
          .post(requestBody)
          .build();

      Response response = client.newCall(request).execute();

      String responseBody = response.body().string();

      int code = response.code();
      String responseString = null;
      if (code == 204) {
          responseString = "";
          return responseString;
      } else if (code >= 200 && code < 300) {
          return responseBody;
      } else {
          if (response.message() != null) {
              responseString = response.message();
          } else {
              responseString = "no data";
          }
      }
      throw new ApiException(code, responseString);
  }

  public String logoutRecap(HttpUrl url, Headers headers) throws ApiException {
      JSONObject jsonObject = new JSONObject();
      RequestBody requestBody = RequestBody.create(JSON, jsonObject.toString());
      Request request = new Request.Builder()
          .url(url)
          .headers(headers)
          .post(requestBody)
          .build();

      try {
          Response response = client.newCall(request).execute();


          String responseBody = response.body().string();

          int code = response.code();
          String responseString = null;
          if (code == 204) {
              responseString = "";
              return responseString;
          } else if (code >= 200 && code < 300) {
              return responseBody;
          } else {
              if (response.message() != null) {
                  responseString = response.message();
              } else {
                  responseString = "no data";
              }
          }
          throw new ApiException(code, responseString);
      } catch (IOException e) {
          e.printStackTrace();
      }
      throw new ApiException();

  }

  public HttpUrl createUrl(String host, String path, List<Pair> queryParams) {

      String url = host + path;
      HttpUrl.Builder httpUrl = HttpUrl.parse(url).newBuilder();

      for (Pair queryParam : queryParams) {
          httpUrl.addQueryParameter(queryParam.getName(), queryParam.getValue());
      }

      return httpUrl.build();
  }
}
